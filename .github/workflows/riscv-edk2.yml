name: Docker

on:
  # Run CI for this branch and all PRs
  push:
    branches:
      - '*-gh-actions'
      - riscv-to-upstream
  pull_request:

jobs:
  build-u500:
    name: Build U500 firmware image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/checkout@v2
        with:
          repository: riscv/riscv-edk2
          ref: 'riscv-to-upstream'
          submodules: true
          path: edk2

      - name: Pull image
        run: docker pull ghcr.io/johnazoidberg/riscv-edk2:latest

      - name: Make build directory to access build results
        run: mkdir Build

      - name: Build U500
        run: |
          docker run --rm \
            -v $(pwd)/Build:/Build \
            -v $(pwd)/:/edk2-platforms \
            -v $(pwd)/edk2:/edk2 \
            -i ghcr.io/johnazoidberg/riscv-edk2:latest \
            /edk2-platforms/build-edk2.sh \
            Platform/SiFive/U5SeriesPkg/FreedomU500VC707Board/U500.dsc

      - name: Check if FD files are there
        run: ls -l Build/FreedomU500VC707/DEBUG_GCC5/FV/U500.fd

      - uses: actions/upload-artifact@master
        with:
          name: U500.fd
          path: Build/FreedomU500VC707/DEBUG_GCC5/FV/U500.fd

  build-u540:
    name: Build U540 firmware image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/checkout@v2
        with:
          repository: riscv/riscv-edk2
          ref: 'riscv-to-upstream'
          submodules: true
          path: edk2

      - name: Pull image
        run: docker pull ghcr.io/johnazoidberg/riscv-edk2:latest

      - name: Make build directory to access build results
        run: mkdir Build

      - name: Build U540
        run: |
          docker run --rm \
            -v $(pwd)/Build:/Build \
            -v $(pwd)/:/edk2-platforms \
            -v $(pwd)/edk2:/edk2 \
            -i ghcr.io/johnazoidberg/riscv-edk2:latest \
            /edk2-platforms/build-edk2.sh \
            Platform/SiFive/U5SeriesPkg/FreedomU540HiFiveUnleashedBoard/U540.dsc

      - name: Check if FD files are there
        run: ls -l Build/FreedomU540HiFiveUnleashed/DEBUG_GCC5/FV/U540.fd

      - uses: actions/upload-artifact@master
        with:
          name: U540
          path: Build/FreedomU540HiFiveUnleashed/DEBUG_GCC5/FV

  build-beaglev:
    name: Build BeagleV firmware image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/checkout@v2
        with:
          repository: riscv/riscv-edk2
          ref: 'riscv-to-upstream'
          submodules: true
          path: edk2

      - name: Pull image
        run: docker pull ghcr.io/johnazoidberg/riscv-edk2:latest

      - name: Make build directory to access build results
        run: mkdir Build

      - name: Build BeagleV
        run: |
          docker run --rm \
            -v $(pwd)/Build:/Build \
            -v $(pwd)/:/edk2-platforms \
            -v $(pwd)/edk2:/edk2 \
            -i ghcr.io/johnazoidberg/riscv-edk2:latest \
            /edk2-platforms/build-edk2.sh \
            Platform/BeagleV/BeagleV.dsc

      - name: Check if FD files are there
        run: ls -l Build/BeagleV/DEBUG_GCC5/FV/BEAGLEV.fd

      - uses: actions/upload-artifact@master
        with:
          name: BEAGLEV.fd
          path: Build/BeagleV/DEBUG_GCC5/FV/BEAGLEV.fd

  build-virt:
    name: Build QEMU RiscvVirt firmware image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/checkout@v2
        with:
          repository: riscv/riscv-edk2
          ref: 'riscv-to-upstream'
          submodules: true
          path: edk2

      - name: Pull image
        run: docker pull ghcr.io/johnazoidberg/riscv-edk2:latest

      - name: Make build directory to access build results
        run: mkdir Build

      - name: Build RiscvVirt
        run: |
          docker run --rm \
            -v $(pwd)/Build:/Build \
            -v $(pwd)/:/edk2-platforms \
            -v $(pwd)/edk2:/edk2 \
            -i ghcr.io/johnazoidberg/riscv-edk2:latest \
            /edk2-platforms/build-edk2.sh \
            Platform/Qemu/RiscvVirt/RiscvVirt.dsc

      - name: Check if FD files are there
        run: ls -l Build/RiscvVirt/DEBUG_GCC5/FV/RISCVVIRT.fd

      - uses: actions/upload-artifact@master
        with:
          name: RiscvVirt
          path: Build/RiscvVirt/DEBUG_GCC5/FV

  test-u540:
    name: Boot U540 to UEFI Shell
    runs-on: ubuntu-latest
    needs: build-u540
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: U540
          path: Build/FreedomU540HiFiveUnleashed/DEBUG_GCC5/FV

      - name: Chmod U540.fd
        run: chmod +w Build/FreedomU540HiFiveUnleashed/DEBUG_GCC5/FV/U540.fd

      # Call the custom action in this repo at /action.yml
      - uses: ./
        with:
          entrypoint: './run-u540.sh'

  test-virt:
    name: Boot RiscvVirt to UEFI Shell
    runs-on: ubuntu-latest
    needs: build-virt
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: RiscvVirt
          path: Build/RiscvVirt/DEBUG_GCC5/FV

      - name: Chmod RISCVVIRT.fd
        run: chmod +w Build/RiscvVirt/DEBUG_GCC5/FV/RISCVVIRT.fd

      # Call the custom action in this repo at /action.yml
      - uses: ./
        with:
          entrypoint: './run-virt.sh'

  test-virt-linux:
    name: Boot RiscvVirt to Linux
    runs-on: ubuntu-latest
    needs: build-virt
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: RiscvVirt
          path: Build/RiscvVirt/DEBUG_GCC5/FV

      - name: Chmod RISCVVIRT.fd
        run: chmod +w Build/RiscvVirt/DEBUG_GCC5/FV/RISCVVIRT.fd

      - name: Prepare ESP
        run: |
          # Get prebuild Linux EFISTUB, initrd and rootfs
          wget https://danielschaefer.me/static/riscv/ci/Image
          wget https://danielschaefer.me/static/riscv/ci/rootfs.cpio
          wget https://danielschaefer.me/static/riscv/ci/rootfs.ext2

          fallocate -l 64M esp.iso
          # Create GPT partition table and create one EFI System Partition
          # TODO: Put ESP and actual root fs on a single disk
          sudo apt install -y parted multipath-tools # multipath-tools for kpartx
          parted esp.iso mklabel gpt --script
          parted esp.iso mkpart primary fat32 0% 100% --script
          parted esp.iso set 1 esp on --script

          # Load image as disk, create filesystem and mount
          LOOP_DEV=$(sudo losetup --find --show esp.iso)
          sudo kpartx -a "$LOOP_DEV"
          sudo mkfs.vfat /dev/mapper/loop*p1
          sudo mount /dev/mapper/loop*p1 /mnt

          # Copy EFISTUB and initrd to ESP
          sudo cp Image /mnt/linux-riscv64.efi
          sudo cp rootfs.cpio /mnt/initramfs.cpio
          # Create autostart script
          echo 'fs0:' | sudo tee /mnt/startup.nsh
          echo 'initrd initramfs.cpio' | sudo tee -a /mnt/startup.nsh
          echo 'linux-riscv64.efi root=/dev/vda rootwait earlycon' | sudo tee -a /mnt/startup.nsh

          # Unmount
          sudo umount /mnt
          sudo kpartx -d "$LOOP_DEV"
          sudo losetup -d "$LOOP_DEV"


      # Call the custom action in this repo at /action.yml
      - uses: ./
        with:
          entrypoint: './run-virt-linux.sh'
